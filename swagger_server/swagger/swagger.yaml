openapi: 3.0.1
info:
  title: Words
  description: Words API
  termsOfService: http://www.romank.net/content/about
  contact:
    email: sgrade@users.noreply.github.com
  license:
    name: MIT license
    url: https://github.com/sgrade/words-api/blob/master/LICENSE
  version: 1.0.1
servers:
- url: /
  description: basePath
- url: https://virtserver.swaggerhub.com/sgrade/words/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: word
  description: Create, read, update, delete words in the database
- name: words
  description: Learn words
- name: store
  description: Store
- name: user
  description: Create, read, update, delete users
paths:
  /word:
    put:
      tags:
      - word
      summary: Update an existing word
      operationId: update_word
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Word'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Word not found
        "405":
          description: Validation exception
      x-openapi-router-controller: words_backend.controllers.word_controller
    post:
      tags:
      - word
      summary: Create a new word in the database
      operationId: create_word
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Word'
      responses:
        "405":
          description: Invalid input
      security:
      - wordstore_auth:
        - write:words
        - read:words
      x-openapi-router-controller: words_backend.controllers.word_controller
  /word/{wordId}:
    get:
      tags:
      - word
      summary: Find word by ID
      description: Returns a single word
      operationId: get_word_by_id
      parameters:
      - name: wordId
        in: path
        description: ID of word to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: AjW1TOyy9NMDhKFFdLtT
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Word'
            application/xml:
              schema:
                $ref: '#/components/schemas/Word'
        "400":
          description: Invalid ID supplied
        "404":
          description: Word not found
      x-openapi-router-controller: words_backend.controllers.word_controller
    post:
      tags:
      - word
      summary: Updates a word in the store with form data
      operationId: update_word_with_form
      parameters:
      - name: wordId
        in: path
        description: ID of word that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: AjW1TOyy9NMDhKFFdLtT
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        "405":
          description: Invalid input
      x-openapi-router-controller: words_backend.controllers.word_controller
    delete:
      tags:
      - word
      summary: Delete word
      operationId: delete_word
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: wordId
        in: path
        description: Word id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: AjW1TOyy9NMDhKFFdLtT
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Word not found
      x-openapi-router-controller: words_backend.controllers.word_controller
  /word/{wordId}/uploadImage:
    post:
      tags:
      - word
      summary: uploads an image
      operationId: upload_file
      parameters:
      - name: wordId
        in: path
        description: ID of word to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: AjW1TOyy9NMDhKFFdLtT
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      x-openapi-router-controller: words_backend.controllers.word_controller
  /words:
    get:
      tags:
      - words
      summary: Get words to learn
      description: Returns number of words to learn
      operationId: get_words
      parameters:
      - name: limit
        in: query
        description: number of words to return
        required: false
        style: form
        explode: true
        schema:
          minimum: 3
          type: integer
          default: 3
      - name: status
        in: query
        description: status of words to return
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - notStarted
            - inProgress
            - learned
        examples:
          oneStatus:
            summary: Example of a single status
            value:
            - inProgress
          multipleStatuses:
            summary: Example of multiple statuses
            value:
            - notStarted
            - inProgress
            - learned
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Words'
            application/xml:
              schema:
                $ref: '#/components/schemas/Words'
        "400":
          description: Invalid number of words supplied
        "404":
          description: Words not found
      x-openapi-router-controller: words_backend.controllers.words_controller
  /words/findByStatus:
    get:
      tags:
      - words
      summary: Finds Words by status
      description: Multiple status values can be provided with comma separated strings
      operationId: find_words_by_status
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: notStarted
            enum:
            - notStarted
            - inProgress
            - learned
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Words'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Words'
        "400":
          description: Invalid status value
      x-openapi-router-controller: words_backend.controllers.words_controller
  /words/findByName/{term}:
    get:
      tags:
      - words
      summary: Find Words by name
      description: Returns all words, which have the term in their name
      operationId: find_words_by_name
      parameters:
      - name: term
        in: path
        description: Term to search in the names
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Word'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Word'
        "400":
          description: Invalid status value
      x-openapi-router-controller: words_backend.controllers.words_controller
  /learned:
    put:
      tags:
      - words
      summary: Update word status for the user
      description: This can only be done by the logged in user.
      operationId: mark_word_learned
      requestBody:
        description: Word object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Word'
        required: true
      responses:
        "400":
          description: Invalid word supplied
        "404":
          description: Word not found
      x-openapi-router-controller: words_backend.controllers.words_controller
  /store/inventory:
    get:
      tags:
      - store
      summary: Returns word inventories by status
      description: Returns a map of status codes to quantities
      operationId: get_inventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
                x-content-type: application/json
      x-openapi-router-controller: words_backend.controllers.store_controller
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a word
      operationId: place_order
      requestBody:
        description: order placed for purchasing the word
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid Order
      x-openapi-router-controller: words_backend.controllers.store_controller
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions
      operationId: get_order_by_id
      parameters:
      - name: orderId
        in: path
        description: ID of word that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          maximum: 10
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      x-openapi-router-controller: words_backend.controllers.store_controller
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors
      operationId: delete_order
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      x-openapi-router-controller: words_backend.controllers.store_controller
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: create_user
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: words_backend.controllers.user_controller
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: create_users_with_array_input
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: words_backend.controllers.user_controller
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: create_users_with_list_input
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: words_backend.controllers.user_controller
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: login_user
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
      x-openapi-router-controller: words_backend.controllers.user_controller
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logout_user
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: words_backend.controllers.user_controller
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: get_user_by_name
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-openapi-router-controller: words_backend.controllers.user_controller
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: update_user
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      x-openapi-router-controller: words_backend.controllers.user_controller
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: delete_user
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-openapi-router-controller: words_backend.controllers.user_controller
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        wordId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      example:
        quantity: 1
        wordId: 6
        id: 0
        shipDate: 2000-01-23T04:56:07.000+00:00
        complete: false
        status: placed
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      xml:
        name: User
    Word:
      required:
      - imageurl
      - name
      type: object
      properties:
        id:
          type: string
          example: AjW1TOyy9NMDhKFFdLtT
        name:
          type: string
          example: cow
        imageurl:
          type: string
          example: cow.jpg
      example:
        imageurl: cow.jpg
        name: cow
        id: AjW1TOyy9NMDhKFFdLtT
      xml:
        name: Word
    Words:
      type: array
      xml:
        name: Words
      items:
        $ref: '#/components/schemas/Word'
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      example:
        code: 0
        type: type
        message: message
    body:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the word
        status:
          type: string
          description: Updated status of the word
  requestBodies:
    Word:
      description: Word object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Word'
        application/xml:
          schema:
            $ref: '#/components/schemas/Word'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      x-basicInfoFunc: swagger_server.controllers.authorization_controller.check_BasicAuth
    wordstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://wordstore.swagger.io/oauth/dialog
          scopes:
            write:words: modify words in your account
            read:words: read your words
      x-tokenInfoFunc: swagger_server.controllers.authorization_controller.check_wordstore_auth
      x-scopeValidateFunc: swagger_server.controllers.authorization_controller.validate_scope_wordstore_auth
    api_key:
      type: apiKey
      name: api_key
      in: header
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_api_key

